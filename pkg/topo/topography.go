package topo

import (
	"willbeason/worldproc/pkg/fixed"
	"willbeason/worldproc/pkg/noise"
)

const (
	// maxDepth of 50 supports scales of down to 1 pixel for relative scales of 0.8.
	// Relative scales more frequent than that are too noisy.
	maxDepth = 50
)

// Topography represents a topography generated by a noise.Value.
//
// Notice all of the data in here are held as structs, not pointers to structs.
// The dereferencing time for these is significant compared to the actual
// calculations. Measured 4x faster to directly embed these structs.
type Topography struct {
	Noise noise.Value
	Scales Scales
	Offsets Offsets
	Rotations Rotations

	Depth int
}

// Height calculates the height of the topography at the passed values.
func (t *Topography) Height(x, y fixed.F16) fixed.F32 {
	height := fixed.Zero32
	for depth := 0; depth < t.Depth; depth++ {
		// Scale
		xt, yt := x.Times(t.Scales.frequency[depth]).F16(), y.Times(t.Scales.frequency[depth]).F16()
		// Offset
		xt, yt = xt + t.Offsets.x[depth], yt + t.Offsets.y[depth]
		// Rotate and scale.
		// Measured faster to inline rotation.
		height += t.Noise.V((xt.Times(t.Rotations.cos[depth]) + yt.Times(t.Rotations.sin[depth])).F16(), (yt.Times(t.Rotations.cos[depth]) - xt.Times(t.Rotations.sin[depth])).F16()).F16().Times(t.Scales.amplitude[depth])
	}

	return height
}
